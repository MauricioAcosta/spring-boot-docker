package service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import service.Person;
import service.PersonRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called personRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private PersonRepository personRepository;

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody ResponseEntity addNewPerson(@RequestParam String nombre, @RequestParam String nombre_madre,
			@RequestParam String nombre_padre) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		List<Person> personas = personRepository.findByNombre(nombre);

		if (personas.size() > 0) {
			return new ResponseEntity(personas.get(0), HttpStatus.FOUND);
		}

		Person persona = new Person();
		persona.setNombre(nombre);

		if (nombre_madre != "") {
			personas = personRepository.findByNombre(nombre_madre);
			if (personas.size() > 0) {
				persona.setMadre(personas.get(0));
			} else {
				Person madre = new Person();
				madre.setNombre(nombre_madre);
				personRepository.save(madre);
				persona.setMadre(madre);
			}
		}

		if (nombre_padre != "") {
			personas = personRepository.findByNombre(nombre_padre);
			if (personas.size() > 0) {
				persona.setPadre(personas.get(0));
			} else {
				Person padre = new Person();
				padre.setNombre(nombre_padre);
				personRepository.save(padre);
				persona.setPadre(padre);
			}
		}

		personRepository.save(persona);

		return new ResponseEntity(persona, HttpStatus.OK);

	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Person> getAllPersons() {
		// This returns a JSON or XML with the persons
		return personRepository.findAll();
	}

	@GetMapping(path = "/one")
	public @ResponseBody Iterable<Person> getOnePerson(@RequestParam String nombre) {
		// This returns a JSON or XML with the persons
		Iterable<Person> personas = personRepository.findByNombre(nombre);
		return personas;
	}
}
